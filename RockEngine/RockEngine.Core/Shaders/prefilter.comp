#version 450
#extension GL_KHR_vulkan_glsl : enable
#extension GL_EXT_nonuniform_qualifier : enable

layout(set = 0, binding = 0) uniform samplerCube inputEnvMap;
layout(set = 0, binding = 1, rgba16f) writeonly uniform imageCube outputPrefilter;

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

layout(push_constant) uniform PushConstants {
    ivec2 outputSize;
    float roughness;
    uint mipLevel;
} pc;

const float PI = 3.14159265359;
const uint SAMPLE_COUNT = 1024u;

vec3 calculateCubeDirection(ivec3 coord) {
    if (coord.x >= pc.outputSize.x || coord.y >= pc.outputSize.y) {
        return vec3(0);
    }
    vec2 uv = (vec2(coord.xy) + 0.5) / vec2(pc.outputSize);
    uv = uv * 2.0 - 1.0;

    switch(coord.z) {
    case 0: return normalize(vec3(1.0, -uv.y, -uv.x));  // +X (flip Y)
    case 1: return normalize(vec3(-1.0, -uv.y, uv.x));   // -X (flip Y)
    case 2: return normalize(vec3(uv.x, 1.0, -uv.y));    // +Y (unchanged)
    case 3: return normalize(vec3(uv.x, -1.0, uv.y));    // -Y (unchanged)
    case 4: return normalize(vec3(uv.x, -uv.y, 1.0));    // +Z (flip Y)
    case 5: return normalize(vec3(-uv.x, -uv.y, -1.0));  // -Z (flip Y)
    }
    return vec3(0);
}

float radicalInverseVdC(uint bits) {
    bits = (bits << 16u) | (bits >> 16u);
    bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
    bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
    bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
    bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
    return float(bits) * 2.3283064365386963e-10;
}

vec3 importanceSampleGGX(vec2 Xi, vec3 N, float roughness) {
    float a = roughness * roughness;
    
    float phi = 2.0 * PI * Xi.x;
    float cosTheta = sqrt((1.0 - Xi.y) / (1.0 + (a*a - 1.0) * Xi.y));
    float sinTheta = sqrt(1.0 - cosTheta*cosTheta);
    
    vec3 H = vec3(
        cos(phi) * sinTheta,
        sin(phi) * sinTheta,
        cosTheta
    );
    
    vec3 up = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);
    vec3 tangent = normalize(cross(up, N));
    vec3 bitangent = cross(N, tangent);
    
    return normalize(tangent * H.x + bitangent * H.y + N * H.z);
}

void main() {
    ivec3 coord = ivec3(gl_GlobalInvocationID);
    vec3 N = calculateCubeDirection(coord);
    vec3 R = N;
    vec3 V = R;

    float totalWeight = 0.0;
    vec3 prefilteredColor = vec3(0.0);
    
    for(uint i = 0u; i < SAMPLE_COUNT; ++i) {
        vec2 Xi = vec2(
            float(i) / float(SAMPLE_COUNT),
            radicalInverseVdC(i)
        );
        
        vec3 H = importanceSampleGGX(Xi, N, pc.roughness);
        vec3 L = normalize(2.0 * dot(V, H) * H - V);

        float NdotL = max(dot(N, L), 0.0);
        if(NdotL > 0.0) {
            float NdotH = max(dot(N, H), 0.0);
            float VdotH = max(dot(V, H), 0.0);
            float a = pc.roughness * pc.roughness;
            float a2 = a * a;
            float denominator = (NdotH * NdotH) * (a2 - 1.0) + 1.0;
            denominator = PI * denominator * denominator;
            float D = a2 / denominator;
    
            float pdf = (D * NdotH) / (4.0 * VdotH) + 0.0001;
            float resolution = float(pc.outputSize.x);
            float saTexel = 4.0 * PI / (6.0 * resolution * resolution);
            float saSample = 1.0 / (float(SAMPLE_COUNT) * pdf + 0.0001);
            
            float mipLevel = pc.roughness == 0.0 ? 0.0 : 0.5 * log2(saSample / saTexel);
            
            prefilteredColor += textureLod(inputEnvMap, L, mipLevel).rgb * NdotL;
            totalWeight += NdotL;
        }
    }

    prefilteredColor /= totalWeight;
    imageStore(outputPrefilter, coord, vec4(prefilteredColor, 1.0));
}